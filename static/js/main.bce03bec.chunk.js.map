{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","QuoteBox","props","state","quotes","currentQuote","colors","background","buttons","getRandomQuote","bind","fetch","then","response","json","data","setState","Math","floor","random","length","randomIndex","this","RGBtoHex","RGBArr","min","max","delta","h","round","backgroundElement","document","getElementById","getElementsByClassName","text","getElementsByTagName","currentHValue","style","backgroundColor","match","currentButtonHValue","valueOffset","goalHValue","goalHValueButton","test","setInterval","currentBackgroundHSLValue","buttonHValue","clearInterval","newBackgroundHSLValue","newButtonHSLValue","i","color","executeAnimation","className","id","quote","author","href","target","onClick","React","Component","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bce03bec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass QuoteBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { \n      quotes: [],\n      currentQuote: '',\n      colors: { \n        background: { background: 'hsl(0deg, 0%, 10%)' },\n        buttons: { background: 'hsl(0deg, 0%, 30%)' }\n      },\n    };\n\n    this.getRandomQuote = this.getRandomQuote.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\")\n    .then(response => response.json())\n    .then(data => \n      this.setState({\n        quotes: data.quotes,\n        currentQuote: data.quotes[Math.floor(Math.random() * data.quotes.length - 1)]\n      })\n    );\n  }\n\n  getRandomQuote() {\n    let randomIndex = Math.floor(Math.random() * this.state.quotes.length);\n\n    function RGBtoHex(RGBArr) {\n      RGBArr[0] /= 255;\n      RGBArr[1] /= 255;\n      RGBArr[2] /= 255;\n\n      let min = Math.min(...RGBArr),\n          max = Math.max(...RGBArr),\n          delta = max - min,\n          h = 0;\n\n      if(delta == 0) {\n        h = 0;\n      }\n      else if(max == RGBArr[0]) {\n        h = ((RGBArr[1]-RGBArr[2]) / delta) % 6;\n      }\n      else if(max == RGBArr[1]) {\n        h = (RGBArr[2] - RGBArr[0]) / delta + 2;\n      }\n      else {\n        h = (RGBArr[0] - RGBArr[1]) / delta + 4;\n      }\n\n      h = Math.round(h * 60);\n\n      if(h < 0) {\n        h += 360;\n      }\n\n      return h;\n    }\n\n    let backgroundElement = document.getElementById(\"App\");\n    let buttons = document.getElementsByClassName(\"rqm-button\");\n    let text = document.getElementsByTagName(\"p\");\n    \n    let currentHValue = RGBtoHex(backgroundElement.style.backgroundColor.match(/\\d+/g));\n    let currentButtonHValue = RGBtoHex(buttons[0].style.backgroundColor.match(/\\d+/g));\n\n    let valueOffset = Math.floor(Math.random() * 6) + 10;\n\n    let goalHValue = valueOffset + currentHValue;\n    goalHValue = goalHValue > 360 ? goalHValue - 360 : goalHValue;\n    let goalHValueButton = currentButtonHValue + valueOffset;\n    goalHValueButton = goalHValueButton > 360 ? goalHValueButton - 360 : goalHValueButton;\n    \n    function executeAnimation() {\n      let test = setInterval(animate, 15);\n\n      function animate() {\n        let currentBackgroundRGB = backgroundElement.style.backgroundColor.match(/\\d+/g);\n        let currentBackgroundHSLValue = RGBtoHex(currentBackgroundRGB);\n\n        let buttonHValue = RGBtoHex(buttons[0].style.backgroundColor.match(/\\d+/g));\n\n        if(currentBackgroundHSLValue == goalHValue) {\n          clearInterval(test);\n        }\n        else {\n          let updatedHValue = currentBackgroundHSLValue + 1 > 360 ? currentBackgroundHSLValue + 1 - 360 : currentBackgroundHSLValue + 1; \n          let updatedButtonHValue = buttonHValue + 1 > 360 ? buttonHValue + 1 - 360 : buttonHValue + 1; \n          \n          let newBackgroundHSLValue = 'hsl(' + updatedHValue + ', 85%, 45%)';\n          let newButtonHSLValue = 'hsl(' + updatedButtonHValue + ', 90%, 35%)';\n          backgroundElement.style.backgroundColor = newBackgroundHSLValue;\n\n          for(let i = 0; i < text.length; i++) {\n            text[i].style.color = newButtonHSLValue;\n          }\n          \n          for(let i = 0; i < buttons.length; i++) {\n            buttons[i].style.backgroundColor = newButtonHSLValue;\n          }\n          \n        }\n      }\n    }\n\n    executeAnimation();\n\n    this.setState({\n      currentQuote: this.state.quotes[randomIndex],\n      /*colors: {\n        background: { background: 'hsl(' +randomColor+ 'deg, 85%, 40%)'},\n        buttons: { background: 'hsl('+ (randomColorAnalog) + 'deg, 60%, ' + randomLightness+ '%)' }\n      }*/\n    });\n  }\n\n  render() {\n    return (\n      <div style={this.state.colors.background} className=\"App\" id=\"App\">\n        <div id=\"quote-box\">\n          <p id=\"text\">\"{ this.state.currentQuote === \"\" ? \"The code broke\" : this.state.currentQuote.quote }\"</p>\n          <p id=\"author\">- { this.state.currentQuote === \"\" ? \"- Every Developer ever\" : this.state.currentQuote.author }</p>\n          <a style={this.state.colors.buttons} className=\"rqm-button\" href=\"twitter.com/intent/tweet\" id=\"tweet-quote\" target=\"_blank\">Twitter</a>\n          <button style={this.state.colors.buttons} className=\"rqm-button\" id=\"new-quote\" onClick={this.getRandomQuote}>Change Quote</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <QuoteBox />\n      </div>\n    );\n  }\n}/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuoteBox />\n    </div>\n  );\n}*/\n\nexport default QuoteBox;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuoteBox from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<QuoteBox />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}